package com.organicapp.service;import com.organicapp.model.Item;import com.organicapp.repository.ItemRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.web.multipart.MultipartFile;import java.io.IOException;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.Paths;import java.util.List;import java.util.Optional;import java.util.UUID;@Servicepublic class ItemService {    @Autowired    private ItemRepository itemRepository;    private final String UPLOAD_DIR = "uploads/";    public Item createItem(Item item, MultipartFile image) throws IOException {        if (image != null && !image.isEmpty()) {            String imagePath = saveImage(image);            item.setImageUrl(imagePath);        }        return itemRepository.save(item);    }    public List<Item> getAllItems() {        return itemRepository.findAll();    }    public Optional<Item> getItemById(Integer id) {        return itemRepository.findById(id);    }    public Item updateItem(Integer id, Item itemDetails, MultipartFile image) throws IOException {        Optional<Item> optionalItem = itemRepository.findById(id);        if (optionalItem.isPresent()) {            Item item = optionalItem.get();            item.setName(itemDetails.getName());            item.setCategory(itemDetails.getCategory());            item.setPrice(itemDetails.getPrice());            item.setQuantity(itemDetails.getQuantity());            item.setQuantityUnit(itemDetails.getQuantityUnit());            item.setDiscountPrice(itemDetails.getDiscountPrice());            item.setShopName(itemDetails.getShopName());            item.setDetails(itemDetails.getDetails());            item.setAdditionalDetails(itemDetails.getAdditionalDetails());            if (image != null && !image.isEmpty()) {                // Delete old image if exists                if (item.getImageUrl() != null) {                    Files.deleteIfExists(Paths.get(item.getImageUrl()));                }                String imagePath = saveImage(image);                item.setImageUrl(imagePath);            }            return itemRepository.save(item);        } else {            throw new RuntimeException("Item not found");        }    }    public void deleteItem(Integer id) {        Optional<Item> optionalItem = itemRepository.findById(id);        if (optionalItem.isPresent()) {            Item item = optionalItem.get();            if (item.getImageUrl() != null) {                try {                    Files.deleteIfExists(Paths.get(item.getImageUrl()));                } catch (IOException e) {                    // Log error but proceed with deletion                }            }            itemRepository.deleteById(id);        } else {            throw new RuntimeException("Item not found");        }    }    private String saveImage(MultipartFile image) throws IOException {        String fileName = UUID.randomUUID().toString() + "_" + image.getOriginalFilename();        Path filePath = Paths.get(UPLOAD_DIR + fileName);        Files.createDirectories(filePath.getParent());        Files.write(filePath, image.getBytes());        return filePath.toString();    }}