package com.organicapp.controller;import com.organicapp.model.Item;import com.organicapp.service.ItemService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.MultipartFile;import java.util.List;import java.util.Optional;@RestController@RequestMapping("/api/items")@CrossOrigin(origins = "*") // optional for frontendpublic class ItemController {    @Autowired    private ItemService itemService;    // ✅ Create item (supports both JSON and multipart)    @PostMapping(consumes = {"application/json", "multipart/form-data"})    public ResponseEntity<Item> createItem(            @RequestPart(value = "item", required = false) Item item, // for multipart            @RequestPart(value = "image", required = false) MultipartFile image,            @RequestBody(required = false) Item jsonItem // for pure JSON    ) {        try {            // If item comes from JSON body            if (item == null && jsonItem != null) {                item = jsonItem;            }            Item createdItem = itemService.createItem(item, image);            return new ResponseEntity<>(createdItem, HttpStatus.CREATED);        } catch (Exception e) {            e.printStackTrace();            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);        }    }    // ✅ Get all items    @GetMapping    public ResponseEntity<List<Item>> getAllItems() {        List<Item> items = itemService.getAllItems();        return new ResponseEntity<>(items, HttpStatus.OK);    }    // ✅ Get item by ID    @GetMapping("/{id}")    public ResponseEntity<Item> getItemById(@PathVariable Integer id) {        Optional<Item> item = itemService.getItemById(id);        return item.map(value -> new ResponseEntity<>(value, HttpStatus.OK))                .orElseGet(() -> new ResponseEntity<>(HttpStatus.NOT_FOUND));    }    // ✅ Update item (also supports JSON + multipart)    @PutMapping(value = "/{id}", consumes = {"application/json", "multipart/form-data"})    public ResponseEntity<Item> updateItem(            @PathVariable Integer id,            @RequestPart(value = "item", required = false) Item item,            @RequestPart(value = "image", required = false) MultipartFile image,            @RequestBody(required = false) Item jsonItem    ) {        try {            if (item == null && jsonItem != null) {                item = jsonItem;            }            Item updatedItem = itemService.updateItem(id, item, image);            return new ResponseEntity<>(updatedItem, HttpStatus.OK);        } catch (Exception e) {            e.printStackTrace();            return new ResponseEntity<>(HttpStatus.NOT_FOUND);        }    }    @DeleteMapping("/{id}")    public ResponseEntity<HttpStatus> deleteItem(@PathVariable Integer id) {        try {            itemService.deleteItem(id);            return new ResponseEntity<>(HttpStatus.NO_CONTENT);        } catch (Exception e) {            e.printStackTrace();            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);        }    }}